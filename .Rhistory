shiny::runApp()
install.packages("DT")
runApp()
runApp()
tbl_df(basealt = "Before TCJA", agi = 70000)
?tbl_df
runApp()
as_tibble(basealt = "Before TCJA", agi = 70000)
as_tibble(list(basealt = "Before TCJA", agi = 70000))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactiveValues
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
stded <- data.table(
status = c("Married Filing Jointly","Single","Head of Household","Married Filing Separately")
)
runApp()
runApp()
stded <- as_tibble(list(
status = c("Married Filing Jointly","Single","Head of Household","Married Filing Separately")
))
stded
stded <- as_tibble(list(
status = rep(c("Married Filing Jointly","Single","Head of Household","Married Filing Separately"), 2),
basealt = c(rep("Base", 4), rep("Alt", 4))
))
stded
runApp()
stded <- as_tibble(list(
status = rep(c("Married Filing Jointly","Single","Head of Household","Married Filing Separately"), 2),
basealt = c(rep("Base", 4), rep("Alt", 4)),
standard_deduction = c(
#2017 Amounts
12700,
6350,
9350,
6350
)
))
stded <- as_tibble(list(
status = rep(c("Married Filing Jointly","Single","Head of Household","Married Filing Separately"), 2),
basealt = c(rep("Base", 4), rep("Alt", 4)),
standard_deduction = c(
#2017 Amounts
12700, #MFJ
6350,  #S
9350,  #HOH
6350,  #MFS
#2018 Amounts
24000, #MFJ
12000,  #S
18000,  #HOH
12000
)
))
stded
filter(stded, status =="Single", basealt = "Base")
filter(stded, status ="Single", basealt = "Base")
filter(stded, status =="Single", basealt==Base")
)
filter(stded, status =="Single", basealt == "Base")
filter(stded, status =="Single", basealt == "Base") %>% pull(standard_deduction)
runApp()
runApp()
View(stded)
runApp()
stded[[2,4]]
stded[[3,3]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
max(4150, 4000)
runApp()
runApp()
runApp()
runApp()
runApp()
brackets <- read_csv("brackets.csv")
brackets
?pluck
shiny::runApp()
runApp()
filingstatus = "Single"
fti = 100000
View(brackets)
scen = "Base"
taxb1_params <- filter(brackets, status==filingstatus & scenario == scen & bracket==1)
taxb1_params
taxb1_rate <- pluck(taxb1, rate)
taxb1_rate <- pluck(taxb1_params, rate)
?pluck
taxb1_rate <- pull(taxb1_params, rate)
taxb``
taxb1_rate
taxb1_top <- pull(taxb1_params, br_top)
taxb1_params
taxb1_top
View(brackets)
?assign
calculate_tax <- function(filingstatus, fti, scen) {
for (br in 1:7) {
params <- filter(brackets, bracket = br, status = "filingstatus", scenario = scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(parms, rate)
tax <- min(fti-bot, top-bot)*rate
print(paste0("Bracket ", as.character(br), " Rate:", as.character(tax)))
varname <- paste0("taxb", br)
assign(varname, tax)
}
tax <- taxb1 + taxb2 + taxb3 + taxb4 + taxb5 + taxb6 + taxb7
}
calculate_tax <- function(filingstatus, fti, scen) {
for (br in 1:7) {
params <- filter(brackets, bracket = br, status = "filingstatus", scenario = scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(parms, rate)
tax <- min(fti-bot, top-bot)*rate
print(paste0("Bracket ", as.character(br), " Rate:", as.character(tax)))
varname <- paste0("taxb", br)
assign(varname, tax)
}
tax <- taxb1 + taxb2 + taxb3 + taxb4 + taxb5 + taxb6 + taxb7
print(paste0("Total Tax: ", as.character(tax)))
}
calculate_tax("Single", 1000000, "Base")
calculate_tax <- function(filingstatus, fti, scen) {
for (br in 1:7) {
params <- filter(brackets, bracket = br, status = filingstatus, scenario = scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(parms, rate)
tax <- min(fti-bot, top-bot)*rate
print(paste0("Bracket ", as.character(br), " Rate:", as.character(tax)))
varname <- paste0("taxb", br)
assign(varname, tax)
}
tax <- taxb1 + taxb2 + taxb3 + taxb4 + taxb5 + taxb6 + taxb7
print(paste0("Total Tax: ", as.character(tax)))
}
calculate_tax("Single", 1000000, "Base")
library(tidyverse)
calculate_tax <- function(filingstatus, fti, scen) {
for (br in 1:7) {
params <- filter(brackets, bracket = br, status = filingstatus, scenario = scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(parms, rate)
tax <- min(fti-bot, top-bot)*rate
print(paste0("Bracket ", as.character(br), " Rate:", as.character(tax)))
varname <- paste0("taxb", br)
assign(varname, tax)
}
tax <- taxb1 + taxb2 + taxb3 + taxb4 + taxb5 + taxb6 + taxb7
print(paste0("Total Tax: ", as.character(tax)))
}
calculate_tax("Single", 1000000, "Base")
View(brackets)
remove(filingstatus, fti, scen)
calculate_tax <- function(filingstatus, fti, scen) {
for (br in 1:7) {
params <- filter(brackets, bracket = br, status = filingstatus, scenario = scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(parms, rate)
tax <- min(fti-bot, top-bot)*rate
print(paste0("Bracket ", as.character(br), " Rate:", as.character(tax)))
varname <- paste0("taxb", br)
assign(varname, tax)
}
tax <- taxb1 + taxb2 + taxb3 + taxb4 + taxb5 + taxb6 + taxb7
print(paste0("Total Tax: ", as.character(tax)))
}
calculate_tax("Single", 1000000, "Base")
View(stded)
bracket = 1
status = "Single"
scenario = "Base"
params <- filter(brackets, bracket = br, status = filingstatus, scenario = scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(parms, rate)
remove(filingstatus, fti, scen)
calculate_tax <- function(filingstatus, fti, scen) {
for (br in 1:7) {
params <- filter(brackets, bracket == br, status == filingstatus, scenario == scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(parms, rate)
tax <- min(fti-bot, top-bot)*rate
print(paste0("Bracket ", as.character(br), " Rate:", as.character(tax)))
varname <- paste0("taxb", br)
assign(varname, tax)
}
tax <- taxb1 + taxb2 + taxb3 + taxb4 + taxb5 + taxb6 + taxb7
print(paste0("Total Tax: ", as.character(tax)))
}
calculate_tax("Single", 1000000, "Base")
calculate_tax <- function(filingstatus, fti, scen) {
for (br in 1:7) {
params <- filter(brackets, bracket == br, status == filingstatus, scenario == scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(params, rate)
tax <- min(fti-bot, top-bot)*rate
print(paste0("Bracket ", as.character(br), " Rate:", as.character(tax)))
varname <- paste0("taxb", br)
assign(varname, tax)
}
tax <- taxb1 + taxb2 + taxb3 + taxb4 + taxb5 + taxb6 + taxb7
print(paste0("Total Tax: ", as.character(tax)))
}
calculate_tax("Single", 1000000, "Base")
calculate_tax("Single", 50000, "Base")
calculate_tax <- function(filingstatus, fti, scen) {
for (br in 1:7) {
params <- filter(brackets, bracket == br, status == filingstatus, scenario == scen)
bot <- pull(params, br_bot)
top <- pull(params, br_top)
rate <- pull(params, rate)
tax <- max(0,min(fti-bot, top-bot)*rate)
print(paste0("Bracket ", as.character(br), " Tax:", as.character(tax)))
varname <- paste0("taxb", br)
assign(varname, tax)
}
tax <- taxb1 + taxb2 + taxb3 + taxb4 + taxb5 + taxb6 + taxb7
print(paste0("Total Tax: ", as.character(tax)))
}
calculate_tax("Single", 1000000, "Base")
calculate_tax("Single", 50000, "Base")
calculate_tax("Single", 75000, "Base")
calculate_tax("Single", 100000, "Base")
function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
tot_item_base <- input$med + input$intpd + input$txpaid + input$char +
input$jobmisc + input$othermisc
st_ded_base <- filter(stded, status ==input$status, basealt == "Base") %>%
pull(standard_deduction)
exemptions_base <- 4050 * (ifelse(input$status == "Married Filing Jointly", 2, 1) + input$dependents)
taxable_income_base <- input$agi - max(st_ded_base, tot_item_base) - exemptions_base
tax_base <- calculate_tax(input$status, taxable_income_base, "Base")
data <- as_tibble(list(
scenario = "Base",
AGI = input$agi,
`Capital Gains` = input$capgains,
`Itemized Deductions` = tot_item_base,
`Standard Deduction` = st_ded_base,
`Exemptions` = exemptions_base,
`Federal Taxable Income` = taxable_income_base,
Tax = tax_base
)) %>%
select(-scenario) %>%
t()
names(data) <- c("Pre-TCJA (TY 2017)")
#, "Post-TCJA (TY 2018)")
data
}))
runApp()
runApp()
runApp()
runApp()
stded
runApp()
runApp()
runApp()
?rename
runApp()
runApp()
?set_names
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
